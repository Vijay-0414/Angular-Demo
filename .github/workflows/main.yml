name: Angular Deployment

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: us-east-1
      STACK_NAME: angular-frontend-stack
      BUCKET_NAME: my-angular-frontend-unique-2025
      CFN_TEMPLATE: cfn/aws-cft.yaml

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Check if CloudFormation stack exists
        id: stack-check
        run: |
          STACK_EXISTS=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].StackName" --output text 2>/dev/null || echo "NO")
          echo "stack_exists=$STACK_EXISTS" >> $GITHUB_OUTPUT

      - name: Create CloudFormation stack if not exists
        if: steps.stack-check.outputs.stack_exists == 'NO'
        run: |
          echo "Creating CloudFormation stack..."
          aws cloudformation deploy \
            --stack-name $STACK_NAME \
            --template-file $CFN_TEMPLATE \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides BucketName=$BUCKET_NAME

      - name: Retrieve CloudFront Distribution ID
        id: cf-id
        run: |
          CF_ID=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --query "Stacks[0].Outputs[?OutputKey=='FrontendCloudFrontId'].OutputValue" \
            --output text)
          echo "cf_id=$CF_ID" >> $GITHUB_OUTPUT

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install Angular dependencies
        run: npm ci

      - name: Build Angular
        run: npm run build -- --prod

      - name: Sync build to S3
        run: |
          DIST_FOLDER=$(ls dist/)
          echo "Syncing ./dist/$DIST_FOLDER to s3://$BUCKET_NAME"
          aws s3 sync ./dist/$DIST_FOLDER s3://$BUCKET_NAME/ --delete

      - name: Invalidate CloudFront cache
        run: |
          echo "Invalidating CloudFront cache..."
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.cf-id.outputs.cf_id }} \
            --paths "/*"
